name: Solar System Workflow
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "feature/*"
env:
  MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

concurrency:
  group: pipeline
  cancel-in-progress: false

jobs:
  hello-world:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hello World Container Action
        uses: ./hello-world-action
        with:
          greeting: "Hello from GitHub Actions!"

  unit-testing:
    needs: hello-world
    timeout-minutes: 20
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: "mongodb://localhost:27017/superData"
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Composite Action - Cache & Install NPM packages
        uses: ./.github/custom-actions/npm-actions
        with:
          path-of-folder: node_modules

      - name: Unit Testing
        run: npm test

      - name: List Files
        run: ls

      - name: Check if artifact exists
        id: check_artifact
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.run_id }},
            });
            const artifactExists = artifacts.data.artifacts.some(artifact => artifact.name === 'Mocha-Test-Result');
            return artifactExists;

      - name: Archive Test Result
        if: ${{ steps.check_artifact.outputs.result == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml
          retention-days: 7

  code-coverage:
    needs: hello-world
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:18
    permissions:
      actions: read
      contents: read
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options: --name mongo
    env:
      MONGO_URI: "mongodb://mongo:27017/superData"
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    steps:
      - uses: actions/checkout@v4
      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: 18
      - name: Composite Action - Cache & Install NPM packages
        uses: ./.github/custom-actions/npm-actions
        with:
          path-of-folder: node_modules

      - continue-on-error: true
        run: npm run coverage
      - uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  reports-s3:
    needs: [code-coverage, unit-testing]
    name: AWS S3 - Upload Reports
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v4
        with:
          name: Mocha-Test-Result

      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-Result

      - name: Merge Test Files
        run: |
          ls -ltr
          mkdir reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${{ github.sha }}/
          mv test-results.xml reports-${{ github.sha }}/
          ls -ltr reports-${{ github.sha }}/

      - name: Upload to AWS S3
        run: echo "uploading......"

      - name: Upload to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: weizhe-bucket1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          SOURCE_DIR: "reports-${{ github.sha }}"
          DEST_DIR: "reports-${{ github.sha }}"

  deploy:
    needs: [unit-testing, code-coverage]
    name: Deploy Testing
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, windows-latest]
        images: [hello-world, alpine]
        exclude:
          - images: alpine
            os: windows-latest
        include:
          - images: amd64/alpine
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Echo Docker Details
        run: docker info
      - name: Run Image on ${{ matrix.os }}
        run: docker run ${{ matrix.images }}

  docker:
    name: Containerization
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: GitHub Container Registry Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build For Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Get Repository Owner in Lowercase
        id: set_var_repo_owner
        run: |
          # Get the repository owner from the context
          REPO_OWNER=${{ github.repository_owner }}

          # Convert to lowercase using shell command
          LOWERCASE_REPO_OWNER=$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')

          # Print the result
          echo "Original Repository Owner: $REPO_OWNER"
          echo "Lowercase Repository Owner: $LOWERCASE_REPO_OWNER"
          echo "::set-output name=lowercase_repo_owner::$LOWERCASE_REPO_OWNER"

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ steps.set_var_repo_owner.outputs.lowercase_repo_owner }}/solar-system:${{ github.sha }}

  dev-deploy:
    if: contains(github.ref,'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-password: ${{ secrets.MONGO_PASSWORD}}
    with:
      mongodb-uri: ${{ vars.MONGO_URI }}
      mongodb-username: ${{ vars.MONGO_USERNAME }}
      environment: development
      k8s-manifest-dir: kubernetes/development/

  dev-integration-testing:
    if: contains(github.ref,'feature/')
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.dev-deploy.outputs.application-url }}
        run: |
          echo $URL
          echo "---------------------------------------"
          curl https://${{ env.URL }}/live -s -k

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-password: ${{ secrets.MONGO_PASSWORD}}
    with:
      mongodb-uri: ${{ vars.MONGO_URI }}
      mongodb-username: ${{ vars.MONGO_USERNAME }}
      environment: production
      k8s-manifest-dir: kubernetes/production/

  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Prod Integration Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.application-url }}
        run: |
          echo $URL
          echo "---------------------------------------"
          curl https://${{ env.URL }}/live -s -k
